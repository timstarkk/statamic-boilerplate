//  █████╗ ██████╗ ██████╗     ██████╗ ██████╗ ███████╗ █████╗ ██╗  ██╗██████╗  ██████╗ ██╗███╗   ██╗████████╗███████╗
// ██╔══██╗██╔══██╗██╔══██╗    ██╔══██╗██╔══██╗██╔════╝██╔══██╗██║ ██╔╝██╔══██╗██╔═══██╗██║████╗  ██║╚══██╔══╝██╔════╝
// ███████║██║  ██║██║  ██║    ██████╔╝██████╔╝█████╗  ███████║█████╔╝ ██████╔╝██║   ██║██║██╔██╗ ██║   ██║   ███████╗
// ██╔══██║██║  ██║██║  ██║    ██╔══██╗██╔══██╗██╔══╝  ██╔══██║██╔═██╗ ██╔═══╝ ██║   ██║██║██║╚██╗██║   ██║   ╚════██║
// ██║  ██║██████╔╝██████╔╝    ██████╔╝██║  ██║███████╗██║  ██║██║  ██╗██║     ╚██████╔╝██║██║ ╚████║   ██║   ███████║
// ╚═╝  ╚═╝╚═════╝ ╚═════╝     ╚═════╝ ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝      ╚═════╝ ╚═╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝
// ADD BREAKPOINTS

//  Make All Classes In a SCSS Array
@mixin makeAll( $class, $properties, $array ) {
    @each $index, $value in $array {
        .#{$class}-#{$index} {
            @each $property in $properties {
                #{$property}: $value;
            }
            @content;
        }
    }
}

//  Make All Classes in the Breakpoints Array
@mixin addBreakpoints() {
    @each $point, $width in $breakpoints {
        @media ( min-width: #{$width} ) {
            .#{$point}\: {
                @content;
            }
        }
    }
}

// This is the same as the make all mixin but it is expected to be inside the addBreakpoints mixin
@mixin makeAllForBreakpoints( $class, $properties, $array ) {
    @each $index, $value in $array {
        &#{$class}-#{$index} {
            @each $property in $properties {
                #{$property}: $value;
            }
            @content;
        }
    }
}


// ██████╗ ███████╗███████╗██████╗  ██████╗ ███╗   ██╗███████╗██╗██╗   ██╗███████╗███╗   ██╗███████╗███████╗███████╗
// ██╔══██╗██╔════╝██╔════╝██╔══██╗██╔═══██╗████╗  ██║██╔════╝██║██║   ██║██╔════╝████╗  ██║██╔════╝██╔════╝██╔════╝
// ██████╔╝█████╗  ███████╗██████╔╝██║   ██║██╔██╗ ██║███████╗██║██║   ██║█████╗  ██╔██╗ ██║█████╗  ███████╗███████╗
// ██╔══██╗██╔══╝  ╚════██║██╔═══╝ ██║   ██║██║╚██╗██║╚════██║██║╚██╗ ██╔╝██╔══╝  ██║╚██╗██║██╔══╝  ╚════██║╚════██║
// ██║  ██║███████╗███████║██║     ╚██████╔╝██║ ╚████║███████║██║ ╚████╔╝ ███████╗██║ ╚████║███████╗███████║███████║
// ╚═╝  ╚═╝╚══════╝╚══════╝╚═╝      ╚═════╝ ╚═╝  ╚═══╝╚══════╝╚═╝  ╚═══╝  ╚══════╝╚═╝  ╚═══╝╚══════╝╚══════╝╚══════╝
// Responsiveness

// Author: Glenn McComb
// Site: https://glennmccomb.com/articles/useful-sass-scss-media-query-mixins-for-bootstrap/
//
// Update: Tyler Underwood
// Notes: I added functionality for variables or numbers used in the mixin.
// 		  So that, we were not confined to using variables in the breakpoints map.


//––––––––––––––––––––––––––––––––––––––––––––––––––
//  RESPOND ABOVE
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include above(sm) {}
@mixin above($breakpoint) {

    // If the breakpoint exists in the map.
    @if map-has-key($breakpoints, $breakpoint) {

        // Get the breakpoint value.
        $breakpoint-value: map-get($breakpoints, $breakpoint);

        // Write the media query.
        @media ( min-width: $breakpoint-value ) {
            @content;
        }

    // Tyler: added else statement for any variables or numbers 
    } @else if type-of($breakpoint) == "number" {

        @media ( min-width: $breakpoint ) {
            @content;
        }

    // If the breakpoint doesn't exist in the map.
    } @else {

        // Log a warning.
        @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
}


//––––––––––––––––––––––––––––––––––––––––––––––––––
//  RESPOND BELOW
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include below(sm) {}
@mixin below($breakpoint) {

    // If the breakpoint exists in the map.
    @if map-has-key($breakpoints, $breakpoint) {

        // Get the breakpoint value.
        $breakpoint-value: map-get($breakpoints, $breakpoint);

        // Write the media query.
        @media (max-width: ($breakpoint-value - 1)) {
            @content;
        }

    // Tyler: added else statement for any variables or numbers 
    } @else if type-of($breakpoint) == "number" {

        @media (max-width: ($breakpoint - 1)) {
            @content;
        }

    // If the breakpoint doesn't exist in the map.
    } @else {

        // Log a warning.
        @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
}


//––––––––––––––––––––––––––––––––––––––––––––––––––
//  RESPOND BETWEEN
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include between(sm, md) {}
@mixin between($lower, $upper) {

    // If both the lower and upper breakpoints exist in the map.
    @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {

    // Get the lower and upper breakpoints.
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);

    // Write the media query.
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
        @content;
    }

    // Tyler: added else statement for any variables or numbers 
    } @else if type-of($lower) == "number" and type-of($upper) == "number" {

        @media (min-width: $lower) and (max-width: ($upper - 1)) {
            @content;
        }

    // Tyler: added else statement for any variables or numbers 
    } @else if type-of($lower) == "number" {

        $upper-breakpoint: map-get($breakpoints, $upper);

        @media (min-width: $lower) and (max-width: ($upper-breakpoint - 1)) {
            @content;
        }

    // Tyler: added else statement for any variables or numbers 
    } @else if type-of($upper) == "number" {

        $lower-breakpoint: map-get($breakpoints, $lower);

        @media (min-width: $lower-breakpoint) and (max-width: ($upper - 1)) {
            @content;
        }

    // If one or both of the breakpoints don't exist.
    } @else {

        // If lower breakpoint is invalid.
        @if (map-has-key($breakpoints, $lower) == false) {

            // Log a warning.
            @warn 'Your lower breakpoint was invalid: #{$lower}.';
        }

        // If upper breakpoint is invalid.
        @if (map-has-key($breakpoints, $upper) == false) {

            // Log a warning.
            @warn 'Your upper breakpoint was invalid: #{$upper}.';
        }
    }
}